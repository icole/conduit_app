<%
  style ||= :default
  size ||= :sm

  # Initialize variables to avoid undefined variable errors
  testid_prefix = "item"  # default value
  btn_class = "btn btn-ghost btn-sm gap-1"
  btn_class_liked = nil
  btn_class_unliked = nil
  icon_size = "h-5 w-5"
  show_text = true
  text_liked = "Liked"
  text_unliked = "Like"

  case likeable
  when Post
    like_path = post_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? post_like_path(likeable, user_like) : nil
  when DiscussionTopic
    like_path = discussion_topic_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? discussion_topic_like_path(likeable, user_like) : nil
  when TopicComment
    # Need to find the discussion topic for nested routes
    topic = likeable.discussion_topic
    like_path = discussion_topic_topic_comment_likes_path(topic, likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? discussion_topic_topic_comment_like_path(topic, likeable, user_like) : nil
  when Comment
    # Polymorphic comments - need to find the commentable for nested routes
    if likeable.commentable.is_a?(Post)
      post = likeable.commentable
      like_path = post_comment_likes_path(post, likeable)
      user_like = likeable.likes.find_by(user: current_user)
      unlike_path = user_like ? post_comment_like_path(post, likeable, user_like) : nil
    elsif likeable.commentable.is_a?(Chore)
      chore = likeable.commentable
      like_path = chore_comment_likes_path(chore, likeable)
      user_like = likeable.likes.find_by(user: current_user)
      unlike_path = user_like ? chore_comment_like_path(chore, likeable, user_like) : nil
    else
      raise ArgumentError, "Unsupported commentable type: #{likeable.commentable.class.name}"
    end
  when Chore
    like_path = chore_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? chore_like_path(likeable, user_like) : nil
  else
    raise ArgumentError, "Unsupported likeable type: #{likeable.class.name}. Supported types: Post, DiscussionTopic, TopicComment, Comment, Chore"
  end

  # Style configurations
  case style
  when :post
    btn_class = "btn btn-ghost btn-sm gap-1"
    icon_size = "h-5 w-5"
    show_text = true
    text_liked = "Liked"
    text_unliked = "Like"
    testid_prefix = "post"
  when :topic
    btn_class_liked = "btn btn-ghost btn-sm text-error topic-liked"
    btn_class_unliked = "btn btn-ghost btn-sm text-base-content/50 hover:text-error"
    icon_size = "w-5 h-5"
    show_text = false
    testid_prefix = "topic"
  when :comment
    btn_class = "btn btn-ghost btn-xs gap-1"
    btn_class_liked = "btn btn-ghost btn-xs gap-1 text-primary"
    icon_size = "h-4 w-4"
    show_text = false
    testid_prefix = "comment"
  else
    btn_class = "btn btn-ghost btn-sm gap-1"
    icon_size = "h-5 w-5"
    show_text = true
    text_liked = "Liked"
    text_unliked = "Like"
    testid_prefix = "item"
  end

  # Helper method to determine the correct button class for liked state
  def liked_button_class(style, btn_class_liked, btn_class)
    case style
    when :topic, :comment
      btn_class_liked
    else
      btn_class
    end
  end

  # Helper method to determine the correct button class for unliked state
  def unliked_button_class(style, btn_class_unliked, btn_class)
    case style
    when :topic
      btn_class_unliked
    else
      btn_class
    end
  end
%>

<% content = capture do %>
  <% 
    # Determine if liked and likes count
    is_liked = likeable.liked_by?(current_user)
    likes_count = likeable.likes_count
  %>
  <% if is_liked && unlike_path %>
    <%= button_to unlike_path,
                  method: :delete,
                  class: liked_button_class(style, btn_class_liked, btn_class),
                  data: { testid: "unlike-#{testid_prefix}-button-#{likeable.id}" } do %>
      <% if style == :topic %>
        <!-- Filled heart for topics -->
        <svg class="<%= icon_size %>" fill="currentColor" viewBox="0 0 24 24">
          <path d="M12 21.35l-1.45-1.32C5.4 15.36 2 12.28 2 8.5 2 5.42 4.42 3 7.5 3c1.74 0 3.41.81 4.5 2.09C13.09 3.81 14.76 3 16.5 3 19.58 3 22 5.42 22 8.5c0 3.78-3.4 6.86-8.55 11.54L12 21.35z"/>
        </svg>
      <% else %>
        <!-- Filled thumbs up for posts and comments -->
        <svg xmlns="http://www.w3.org/2000/svg" class="<%= icon_size %>" viewBox="0 0 20 20" fill="currentColor">
          <path d="M2 10.5a1.5 1.5 0 113 0v6a1.5 1.5 0 01-3 0v-6zM6 10.333v5.43a2 2 0 001.106 1.79l.05.025A4 4 0 008.943 18h5.416a2 2 0 001.962-1.608l1.2-6A2 2 0 0015.56 8H12V4a2 2 0 00-2-2 1 1 0 00-1 1v.667a4 4 0 01-.8 2.4L6.8 7.933a4 4 0 00-.8 2.4z"/>
        </svg>
      <% end %>
      <% if show_text %>
        <span><%= text_liked %> (<%= likes_count %>)</span>
      <% else %>
        <span><%= likes_count %></span>
      <% end %>
    <% end %>
  <% else %>
    <%= button_to like_path,
                  method: :post,
                  class: unliked_button_class(style, btn_class_unliked, btn_class),
                  data: { testid: "like-#{testid_prefix}-button-#{likeable.id}" } do %>
      <% if style == :topic %>
        <!-- Outline heart for topics -->
        <svg class="<%= icon_size %>" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z"></path>
        </svg>
      <% else %>
        <!-- Outline thumbs up for posts and comments -->
        <svg xmlns="http://www.w3.org/2000/svg" class="<%= icon_size %>" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M14 10h4.764a2 2 0 011.789 2.894l-3.5 7A2 2 0 0115.263 21h-4.017c-.163 0-.326-.02-.485-.06L7 20m7-10V5a2 2 0 00-2-2h-.095c-.5 0-.905.405-.905.905 0 .714-.211 1.412-.608 2.006L7 11v9m7-10h-2M7 20H5a2 2 0 01-2-2v-6a2 2 0 012-2h2.5"/>
        </svg>
      <% end %>
      <% if show_text %>
        <span><%= text_unliked %> (<%= likes_count %>)</span>
      <% else %>
        <span><%= likes_count %></span>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<%= turbo_frame_tag dom_id(likeable, :like_section) do %>
  <%= content %>
<% end %>
