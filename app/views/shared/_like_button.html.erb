<%
  style ||= :default
  size ||= :sm

  # Initialize variables to avoid undefined variable errors
  testid_prefix = "item"  # default value
  btn_class = "btn btn-ghost btn-sm gap-1"
  btn_class_liked = nil
  btn_class_unliked = nil
  icon_size = "h-5 w-5"
  show_text = true
  text_liked = "Liked"
  text_unliked = "Like"

  case likeable
  when Post
    like_path = post_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? post_like_path(likeable, user_like) : nil
  when DiscussionTopic
    like_path = discussion_topic_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? discussion_topic_like_path(likeable, user_like) : nil
  when Comment
    # Polymorphic comments - need to find the commentable for nested routes
    if likeable.commentable.is_a?(Post)
      post = likeable.commentable
      like_path = post_comment_likes_path(post, likeable)
      user_like = likeable.likes.find_by(user: current_user)
      unlike_path = user_like ? post_comment_like_path(post, likeable, user_like) : nil
    elsif likeable.commentable.is_a?(DiscussionTopic)
      topic = likeable.commentable
      like_path = discussion_topic_comment_likes_path(topic, likeable)
      user_like = likeable.likes.find_by(user: current_user)
      unlike_path = user_like ? discussion_topic_comment_like_path(topic, likeable, user_like) : nil
    elsif likeable.commentable.is_a?(Chore)
      chore = likeable.commentable
      like_path = chore_comment_likes_path(chore, likeable)
      user_like = likeable.likes.find_by(user: current_user)
      unlike_path = user_like ? chore_comment_like_path(chore, likeable, user_like) : nil
    else
      raise ArgumentError, "Unsupported commentable type: #{likeable.commentable.class.name}"
    end
  when Chore
    like_path = chore_likes_path(likeable)
    user_like = likeable.likes.find_by(user: current_user)
    unlike_path = user_like ? chore_like_path(likeable, user_like) : nil
  else
    raise ArgumentError, "Unsupported likeable type: #{likeable.class.name}. Supported types: Post, DiscussionTopic, Comment, Chore"
  end

  # Style configurations
  case style
  when :post
    btn_class = "btn btn-ghost btn-sm gap-1"
    icon_size = "h-5 w-5"
    show_text = true
    text_liked = "Liked"
    text_unliked = "Like"
    testid_prefix = "post"
  when :topic
    btn_class_liked = "btn btn-ghost btn-sm text-error topic-liked"
    btn_class_unliked = "btn btn-ghost btn-sm text-base-content/50 hover:text-error"
    icon_size = "w-5 h-5"
    show_text = false
    testid_prefix = "topic"
  when :comment
    btn_class = "btn btn-ghost btn-xs gap-1"
    btn_class_liked = "btn btn-ghost btn-xs gap-1 text-primary"
    icon_size = "h-4 w-4"
    show_text = false
    testid_prefix = "comment"
  else
    btn_class = "btn btn-ghost btn-sm gap-1"
    icon_size = "h-5 w-5"
    show_text = true
    text_liked = "Liked"
    text_unliked = "Like"
    testid_prefix = "item"
  end

  # Helper method to determine the correct button class for liked state
  def liked_button_class(style, btn_class_liked, btn_class)
    case style
    when :topic, :comment
      btn_class_liked
    else
      btn_class
    end
  end

  # Helper method to determine the correct button class for unliked state
  def unliked_button_class(style, btn_class_unliked, btn_class)
    case style
    when :topic
      btn_class_unliked
    else
      btn_class
    end
  end
%>

<% content = capture do %>
  <% 
    # Determine if liked and likes count
    is_liked = likeable.liked_by?(current_user)
    likes_count = likeable.likes_count
  %>
  <% if is_liked && unlike_path %>
    <%= button_to unlike_path,
                  method: :delete,
                  class: liked_button_class(style, btn_class_liked, btn_class),
                  data: { testid: "unlike-#{testid_prefix}-button-#{likeable.id}" } do %>
      <% if style == :topic %>
        <!-- Filled heart for topics -->
        <%= heroicon "heart", variant: :solid, options: { class: icon_size } %>
      <% else %>
        <!-- Filled thumbs up for posts and comments -->
        <%= heroicon "hand-thumb-up", variant: :solid, options: { class: icon_size } %>
      <% end %>
      <% if show_text %>
        <span><%= text_liked %> (<%= likes_count %>)</span>
      <% else %>
        <span><%= likes_count %></span>
      <% end %>
    <% end %>
  <% else %>
    <%= button_to like_path,
                  method: :post,
                  class: unliked_button_class(style, btn_class_unliked, btn_class),
                  data: { testid: "like-#{testid_prefix}-button-#{likeable.id}" } do %>
      <% if style == :topic %>
        <!-- Outline heart for topics -->
        <%= heroicon "heart", variant: :outline, options: { class: icon_size } %>
      <% else %>
        <!-- Outline thumbs up for posts and comments -->
        <%= heroicon "hand-thumb-up", variant: :outline, options: { class: icon_size } %>
      <% end %>
      <% if show_text %>
        <span><%= text_unliked %> (<%= likes_count %>)</span>
      <% else %>
        <span><%= likes_count %></span>
      <% end %>
    <% end %>
  <% end %>
<% end %>

<%= turbo_frame_tag dom_id(likeable, :like_section) do %>
  <%= content %>
<% end %>
